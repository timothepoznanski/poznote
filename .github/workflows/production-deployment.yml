name: Production Deployment

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        passphrase: ${{ secrets.PROD_SSH_PASSPHRASE }}
        port: ${{ secrets.PROD_PORT || 22 }}
        script: |
          set -e
          echo "üöÄ Starting production deployment.."
          
          # Define project directory
          PROJECT_DIR="/root/poznote/poznote"
          
          # Check if project directory exists, if not clone the repository
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "üìÅ Project directory not found. Performing initial setup..."
            
            # Create parent directory if needed
            mkdir -p "$(dirname "$PROJECT_DIR")"
            
            # Clone the repository
            echo "ÔøΩ Cloning repository for first deployment..."
            cd "$(dirname "$PROJECT_DIR")"
            git clone https://github.com/timothepoznanski/poznote.git
            
            echo "‚úÖ Repository cloned successfully"
          else
            echo "‚úÖ Project directory exists"
          fi
          
          # Navigate to project directory
          cd "$PROJECT_DIR"
          echo "üìÅ Current directory: $(pwd)"
          
          # Check if .env file exists, if not create it from template
          if [ ! -f ".env" ]; then
            echo "‚ö†Ô∏è  .env file not found, creating from template..."
            if [ -f ".env.template" ]; then
              cp .env.template .env
              echo "‚úÖ .env file created from template"
            else
              echo "‚ùå Error: .env.template not found! Please run setup script first."
              exit 1
            fi
          else
            echo "‚úÖ .env file found"
          fi
          
          # Pull the latest code
          echo "üì• Pulling latest code from repository..."
          
          # Ensure we're on the main branch
          echo "üîÑ Checking out main branch..."
          git checkout main
          
          # Pull the latest changes
          git pull origin main
          
          # Build and deploy
          echo "üîÑ Building and updating production services..."
          docker compose -f docker-compose.yml -f docker-compose-reverse-proxy.yml up -d --build --force-recreate
          
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          
          echo "‚úÖ Production deployment completed!"
          echo "üìä Deployed version: ${{ github.sha }}"
