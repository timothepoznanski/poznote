name: Publish Docker image

on:
  push:
    branches:
      - main
    paths:
      - 'src/version.txt'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Check if version needs update
        id: check_version
        run: |
          # Read version from src/version.txt file
          new_version=$(cat src/version.txt | tr -d '\n')
          echo "New version from version.txt: $new_version"

          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          latest_version=$(echo $latest_tag | sed 's/v//')
          echo "Latest tag version: $latest_version"

          # Compare versions
          if [ "$(printf '%s\n' "$latest_version" "$new_version" | sort -V | head -n1)" = "$latest_version" ] && [ "$latest_version" != "$new_version" ]; then
              echo "needs_update=true" >> $GITHUB_OUTPUT
              echo "version=$new_version" >> $GITHUB_OUTPUT
              echo "version_clean=$new_version" >> $GITHUB_OUTPUT
              echo "üì¶ New version detected: $new_version (latest tag: $latest_version)"
          else
              echo "needs_update=false" >> $GITHUB_OUTPUT
              echo "‚úÖ No new version to publish (version.txt: $new_version, latest tag: $latest_version)"
          fi

      - name: Create and push tag
        if: steps.check_version.outputs.needs_update == 'true'
        run: |
          git tag ${{ steps.check_version.outputs.version }}
          git push origin ${{ steps.check_version.outputs.version }}

      - name: Create GitHub release
        if: steps.check_version.outputs.needs_update == 'true'
        run: |
          gh release create ${{ steps.check_version.outputs.version }} \
            --title "Release ${{ steps.check_version.outputs.version }}" \
            --notes "Automatic release for version ${{ steps.check_version.outputs.version }}

          This release was automatically created when a new version was detected in the repository."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete oldest release and tag
        if: steps.check_version.outputs.needs_update == 'true'
        run: |
          # Keep only the 10 most recent releases
          KEEP_COUNT=10
          
          # Verify GitHub CLI is available (should be pre-installed on GitHub runners)
          if ! command -v gh &> /dev/null; then
            echo "‚ùå GitHub CLI not available, skipping cleanup"
            exit 0
          fi
          
          # Get all releases sorted by creation date (newest first)
          all_releases=$(gh release list --limit 1000 --json tagName,createdAt --jq 'sort_by(.createdAt) | reverse | .[].tagName')
          
          # Count total releases
          total_releases=$(echo "$all_releases" | wc -l)
          echo "üìä Total releases: $total_releases"
          
          if [ "$total_releases" -gt "$KEEP_COUNT" ]; then
            # Get releases to delete (everything after the first KEEP_COUNT)
            releases_to_delete=$(echo "$all_releases" | tail -n +$((KEEP_COUNT + 1)))
            
            echo "üóëÔ∏è  Deleting old releases (keeping $KEEP_COUNT most recent):"
            
            # Delete each old release and its tag
            while IFS= read -r tag; do
              if [ -n "$tag" ]; then
                echo "  - Deleting release: $tag"
                
                # Delete the release
                gh release delete "$tag" --yes 2>/dev/null || echo "    ‚ö†Ô∏è  Failed to delete release $tag"
                
                # Delete the tag remotely (with better error handling)
                if git ls-remote --tags origin | grep -q "refs/tags/$tag$"; then
                  git push origin --delete "$tag" 2>/dev/null && echo "    ‚úÖ Deleted remote tag: $tag" || echo "    ‚ö†Ô∏è  Failed to delete remote tag: $tag"
                else
                  echo "    ‚ÑπÔ∏è  Remote tag $tag not found (already deleted or never existed)"
                fi
                
                echo "    ‚úÖ Processed: $tag"
              fi
            done <<< "$releases_to_delete"
            
            echo "‚úÖ Cleanup completed - kept $KEEP_COUNT most recent releases"
          else
            echo "‚ÑπÔ∏è  No cleanup needed (only $total_releases releases, keeping $KEEP_COUNT)"
          fi
          
          # Additional cleanup: Remove orphaned tags (tags without releases)
          echo ""
          echo "üßπ Cleaning up orphaned tags..."
          
          # Get all remote tags (only version format without 'v' prefix)
          all_tags=$(git ls-remote --tags origin | grep -E 'refs/tags/[0-9]+\.[0-9]+\.[0-9]+$' | sed 's/.*refs\/tags\///' | sort -V)
          
          if [ -z "$all_tags" ]; then
            echo "‚ÑπÔ∏è  No version tags found"
          else
            total_tags=$(echo "$all_tags" | wc -l)
            echo "üìä Total version tags found: $total_tags"
            
            # Get all current release tags
            current_release_tags=$(gh release list --limit 1000 --json tagName --jq '.[].tagName' | sort) || {
              echo "‚ö†Ô∏è  Failed to get releases, skipping orphaned tag cleanup"
              current_release_tags=""
            }
            
            if [ -n "$current_release_tags" ]; then
              # Find orphaned tags (tags that don't have corresponding releases)
              orphaned_tags=""
              while IFS= read -r tag; do
                if [ -n "$tag" ] && ! echo "$current_release_tags" | grep -q "^$tag$"; then
                  orphaned_tags="$orphaned_tags$tag\n"
                fi
              done <<< "$all_tags"
              
              if [ -n "$orphaned_tags" ] && [ "$orphaned_tags" != "\n" ]; then
                orphaned_count=$(echo -e "$orphaned_tags" | grep -v '^$' | wc -l)
                echo "üóëÔ∏è  Found $orphaned_count orphaned tags to delete:"
                
                echo -e "$orphaned_tags" | grep -v '^$' | while IFS= read -r tag; do
                  if [ -n "$tag" ]; then
                    echo "  - Deleting orphaned tag: $tag"
                    git push origin --delete "$tag" 2>/dev/null && echo "    ‚úÖ Deleted orphaned tag: $tag" || echo "    ‚ö†Ô∏è  Failed to delete orphaned tag: $tag"
                  fi
                done
                
                echo "‚úÖ Orphaned tags cleanup completed"
              else
                echo "‚ÑπÔ∏è  No orphaned tags found"
              fi
            else
              echo "‚ÑπÔ∏è  No current releases found, skipping orphaned tag comparison"
            fi
          fi
          
          # Final summary
          echo ""
          echo "üìà Summary:"
          final_releases=$(gh release list --limit 1000 --json tagName --jq '.[].tagName' | wc -l) || echo "Unknown"
          final_tags=$(git ls-remote --tags origin | grep -E 'refs/tags/[0-9]+\.[0-9]+\.[0-9]+$' | wc -l)
          echo "  - Releases: $final_releases"
          echo "  - Version tags: $final_tags"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: steps.check_version.outputs.needs_update == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.check_version.outputs.needs_update == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            copy_src_files=true
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ steps.check_version.outputs.version_clean }}
            APP_VERSION=${{ steps.check_version.outputs.version_clean }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/poznote:${{ steps.check_version.outputs.version_clean }}
            ghcr.io/${{ github.repository_owner }}/poznote:latest

      - name: Clean up old Docker images
        if: steps.check_version.outputs.needs_update == 'true'
        run: |
          echo "üßπ Cleaning up old Docker images..."
          
          # Keep only the 10 most recent Docker image versions
          KEEP_COUNT=10
          PACKAGE_NAME="poznote"
          
          # Get all package versions (excluding 'latest' tag)
          versions=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/user/packages/container/${PACKAGE_NAME}/versions" \
            --jq '[.[] | select(.metadata.container.tags[] != "latest")] | sort_by(.created_at) | reverse | .[].id' \
            2>/dev/null || echo "")
          
          if [ -z "$versions" ]; then
            echo "‚ÑπÔ∏è  No Docker image versions found or failed to fetch"
            exit 0
          fi
          
          # Convert to array and count
          versions_array=($versions)
          total_versions=${#versions_array[@]}
          
          echo "üìä Total Docker image versions: $total_versions"
          
          if [ "$total_versions" -gt "$KEEP_COUNT" ]; then
            # Calculate how many to delete
            to_delete_count=$((total_versions - KEEP_COUNT))
            echo "üóëÔ∏è  Deleting $to_delete_count old Docker image versions (keeping $KEEP_COUNT most recent):"
            
            # Delete the oldest versions (they're at the end of our reversed array)
            for ((i=KEEP_COUNT; i<total_versions; i++)); do
              version_id=${versions_array[$i]}
              echo "  - Deleting Docker image version ID: $version_id"
              
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/user/packages/container/${PACKAGE_NAME}/versions/${version_id}" \
                2>/dev/null && echo "    ‚úÖ Deleted version ID: $version_id" || echo "    ‚ö†Ô∏è  Failed to delete version ID: $version_id"
            done
            
            echo "‚úÖ Docker images cleanup completed - kept $KEEP_COUNT most recent versions"
          else
            echo "‚ÑπÔ∏è  No Docker images cleanup needed (only $total_versions versions, keeping $KEEP_COUNT)"
          fi
          
          # Final count
          echo ""
          final_versions=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/user/packages/container/${PACKAGE_NAME}/versions" \
            --jq 'length' \
            2>/dev/null || echo "Unknown")
          echo "üìà Final Docker images count: $final_versions"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

