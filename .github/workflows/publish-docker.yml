name: Publish Docker image

on:
  push:
    branches:
      - main
    paths:
      - 'src/version.txt'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Check if version needs update
        id: check_version
        run: |
          # Read version from src/version.txt file
          new_version=$(cat src/version.txt | tr -d '\n')
          echo "New version from version.txt: $new_version"

          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          latest_version=$(echo $latest_tag | sed 's/v//')
          echo "Latest tag version: $latest_version"

          # Compare versions
          if [ "$(printf '%s\n' "$latest_version" "$new_version" | sort -V | head -n1)" = "$latest_version" ] && [ "$latest_version" != "$new_version" ]; then
              echo "needs_update=true" >> $GITHUB_OUTPUT
              echo "version=$new_version" >> $GITHUB_OUTPUT
              echo "version_clean=$new_version" >> $GITHUB_OUTPUT
              echo "üì¶ New version detected: $new_version (latest tag: $latest_version)"
          else
              echo "needs_update=false" >> $GITHUB_OUTPUT
              echo "‚úÖ No new version to publish (version.txt: $new_version, latest tag: $latest_version)"
          fi

      - name: Create and push tag
        if: steps.check_version.outputs.needs_update == 'true'
        run: |
          git tag ${{ steps.check_version.outputs.version }}
          git push origin ${{ steps.check_version.outputs.version }}

      - name: Create GitHub release
        if: steps.check_version.outputs.needs_update == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.check_version.outputs.version }}
          release_name: Release ${{ steps.check_version.outputs.version }}
          body: |
            Automatic release for version ${{ steps.check_version.outputs.version }}
            
            This release was automatically created when a new version was detected in the repository.
          draft: false
          prerelease: false

      - name: Delete oldest release and tag
        if: steps.check_version.outputs.needs_update == 'true'
        run: |
          # Keep only the 10 most recent releases
          KEEP_COUNT=10
          
          # Get all releases sorted by creation date (newest first)
          all_releases=$(gh release list --limit 1000 --json tagName,createdAt --jq 'sort_by(.createdAt) | reverse | .[].tagName')
          
          # Count total releases
          total_releases=$(echo "$all_releases" | wc -l)
          echo "ÔøΩ Total releases: $total_releases"
          
          if [ "$total_releases" -gt "$KEEP_COUNT" ]; then
            # Get releases to delete (everything after the first KEEP_COUNT)
            releases_to_delete=$(echo "$all_releases" | tail -n +$((KEEP_COUNT + 1)))
            
            echo "üóëÔ∏è  Deleting old releases (keeping $KEEP_COUNT most recent):"
            
            # Delete each old release and its tag
            while IFS= read -r tag; do
              if [ -n "$tag" ]; then
                echo "  - Deleting release: $tag"
                
                # Delete the release
                gh release delete "$tag" --yes 2>/dev/null || echo "    ‚ö†Ô∏è  Failed to delete release $tag"
                
                # Delete the tag remotely
                git push origin --delete "$tag" 2>/dev/null || echo "    ‚ö†Ô∏è  Tag $tag not found on remote"
                
                echo "    ‚úÖ Deleted: $tag"
              fi
            done <<< "$releases_to_delete"
            
            echo "‚úÖ Cleanup completed - kept $KEEP_COUNT most recent releases"
          else
            echo "‚ÑπÔ∏è  No cleanup needed (only $total_releases releases, keeping $KEEP_COUNT)"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: steps.check_version.outputs.needs_update == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.check_version.outputs.needs_update == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            copy_src_files=true
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ steps.check_version.outputs.version_clean }}
            APP_VERSION=${{ steps.check_version.outputs.version_clean }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/poznote:${{ steps.check_version.outputs.version_clean }}
            ghcr.io/${{ github.repository_owner }}/poznote:latest

